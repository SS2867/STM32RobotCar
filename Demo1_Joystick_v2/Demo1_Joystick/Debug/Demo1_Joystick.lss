
Demo1_Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00000720  000007b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000720  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080014c  0080014c  00000800  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000830  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2a  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073d  00000000  00000000  000012f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000495  00000000  00000000  00001a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00001ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040b  00000000  00000000  00001fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a3  00000000  00000000  000023eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000278e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e2       	ldi	r30, 0x20	; 32
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 34       	cpi	r26, 0x4C	; 76
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e4       	ldi	r26, 0x4C	; 76
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 34       	cpi	r26, 0x4E	; 78
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  9e:	0c 94 8e 03 	jmp	0x71c	; 0x71c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <delay_ms>:

char tx_buffer[30] = "We are ready!";

void delay_ms(int t){ // timer 0 occupied
	int i=0;
	while(i<t){
  a6:	18 16       	cp	r1, r24
  a8:	19 06       	cpc	r1, r25
  aa:	8c f4       	brge	.+34     	; 0xce <delay_ms+0x28>
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
		TCNT0 = 0x00;
		TCCR0B = 0x0B; // WGM[2:0]=010: CTC
  b0:	6b e0       	ldi	r22, 0x0B	; 11
		OCR0A = 250; // Output compare target
  b2:	5a ef       	ldi	r21, 0xFA	; 250
		while( (TIFR0&(1<<OCF0A)) == 0x00 ){}
		TCCR0B = 0x00;
		TIFR0 = (1<<OCF0A);
  b4:	42 e0       	ldi	r20, 0x02	; 2
char tx_buffer[30] = "We are ready!";

void delay_ms(int t){ // timer 0 occupied
	int i=0;
	while(i<t){
		TCNT0 = 0x00;
  b6:	16 bc       	out	0x26, r1	; 38
		TCCR0B = 0x0B; // WGM[2:0]=010: CTC
  b8:	65 bd       	out	0x25, r22	; 37
		OCR0A = 250; // Output compare target
  ba:	57 bd       	out	0x27, r21	; 39
		while( (TIFR0&(1<<OCF0A)) == 0x00 ){}
  bc:	a9 9b       	sbis	0x15, 1	; 21
  be:	fe cf       	rjmp	.-4      	; 0xbc <delay_ms+0x16>
		TCCR0B = 0x00;
  c0:	15 bc       	out	0x25, r1	; 37
		TIFR0 = (1<<OCF0A);
  c2:	45 bb       	out	0x15, r20	; 21
		i++;
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255

char tx_buffer[30] = "We are ready!";

void delay_ms(int t){ // timer 0 occupied
	int i=0;
	while(i<t){
  c8:	82 17       	cp	r24, r18
  ca:	93 07       	cpc	r25, r19
  cc:	a1 f7       	brne	.-24     	; 0xb6 <delay_ms+0x10>
  ce:	08 95       	ret

000000d0 <exhaustive_delay_ms>:
		TIFR0 = (1<<OCF0A);
		i++;
	}
}

void exhaustive_delay_ms(int t){ // timer 0 occupied
  d0:	bc 01       	movw	r22, r24
	int i=0;
	while(i<t){
  d2:	18 16       	cp	r1, r24
  d4:	19 06       	cpc	r1, r25
  d6:	64 f0       	brlt	.+24     	; 0xf0 <exhaustive_delay_ms+0x20>
  d8:	08 95       	ret
		for (unsigned int j=0;j<413;j++){DDRD ^= 0;}
  da:	9a b1       	in	r25, 0x0a	; 10
  dc:	9a b9       	out	0x0a, r25	; 10
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	31 09       	sbc	r19, r1
  e2:	d9 f7       	brne	.-10     	; 0xda <exhaustive_delay_ms+0xa>
		i++;
  e4:	4f 5f       	subi	r20, 0xFF	; 255
  e6:	5f 4f       	sbci	r21, 0xFF	; 255
	}
}

void exhaustive_delay_ms(int t){ // timer 0 occupied
	int i=0;
	while(i<t){
  e8:	64 17       	cp	r22, r20
  ea:	75 07       	cpc	r23, r21
  ec:	19 f4       	brne	.+6      	; 0xf4 <exhaustive_delay_ms+0x24>
  ee:	08 95       	ret
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	50 e0       	ldi	r21, 0x00	; 0
		TIFR0 = (1<<OCF0A);
		i++;
	}
}

void exhaustive_delay_ms(int t){ // timer 0 occupied
  f4:	2d e9       	ldi	r18, 0x9D	; 157
  f6:	31 e0       	ldi	r19, 0x01	; 1
  f8:	f0 cf       	rjmp	.-32     	; 0xda <exhaustive_delay_ms+0xa>

000000fa <__vector_19>:
		for (unsigned int j=0;j<413;j++){DDRD ^= 0;}
		i++;
	}
}

ISR(USART_UDRE_vect){
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	8f 93       	push	r24
 10a:	ef 93       	push	r30
 10c:	ff 93       	push	r31
	if (tx_buffer[0] != 0){  // If there¡¯s a char to trans
 10e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <tx_buffer>
 112:	88 23       	and	r24, r24
 114:	59 f0       	breq	.+22     	; 0x12c <__vector_19+0x32>
		UDR0 = tx_buffer[0];
 116:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 11a:	08 c0       	rjmp	.+16     	; 0x12c <__vector_19+0x32>
	}
	for(int i=0; i<29; i++){  // shift tx_buffer by 1
		tx_buffer[i] = tx_buffer[i+1];
 11c:	81 81       	ldd	r24, Z+1	; 0x01
 11e:	81 93       	st	Z+, r24

ISR(USART_UDRE_vect){
	if (tx_buffer[0] != 0){  // If there¡¯s a char to trans
		UDR0 = tx_buffer[0];
	}
	for(int i=0; i<29; i++){  // shift tx_buffer by 1
 120:	e2 17       	cp	r30, r18
 122:	f3 07       	cpc	r31, r19
 124:	d9 f7       	brne	.-10     	; 0x11c <__vector_19+0x22>
		tx_buffer[i] = tx_buffer[i+1];
	}
	tx_buffer[29] = 0;
 126:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <tx_buffer+0x1d>
}
 12a:	05 c0       	rjmp	.+10     	; 0x136 <__vector_19+0x3c>
 12c:	e4 e0       	ldi	r30, 0x04	; 4
 12e:	f1 e0       	ldi	r31, 0x01	; 1
 130:	21 e2       	ldi	r18, 0x21	; 33
 132:	31 e0       	ldi	r19, 0x01	; 1
 134:	f3 cf       	rjmp	.-26     	; 0x11c <__vector_19+0x22>
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	8f 91       	pop	r24
 13c:	3f 91       	pop	r19
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <adcinit>:

void adcinit(){
	// set REFS1 = 0 |REFS0 = 1 (Vref as AVCC pin) | ADLAR = 0(right adjusted) |  MUX4 to MUX0 is 0000 for ADC0
	ADMUX = 0b01000000;
 14a:	80 e4       	ldi	r24, 0x40	; 64
 14c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	//enable ADC module, set prescalar of 4 which gives CLK/4
	ADCSRA |= (1<<ADEN) | (0<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
 150:	ea e7       	ldi	r30, 0x7A	; 122
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	82 68       	ori	r24, 0x82	; 130
 158:	80 83       	st	Z, r24
 15a:	08 95       	ret

0000015c <adcread>:
}

int adcread(unsigned char channel){
	/* set input channel to read */
	ADMUX = 0x40 | (channel & 0x07);   // 0100 0000 | (channel & 0000 0100)
 15c:	87 70       	andi	r24, 0x07	; 7
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	/* Start ADC conversion */
	ADCSRA |= (1<<ADSC);
 164:	ea e7       	ldi	r30, 0x7A	; 122
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	80 83       	st	Z, r24
	/* Wait until end of conversion by polling ADC interrupt flag */
	while (!(ADCSRA & (1<<ADIF)));
 16e:	80 81       	ld	r24, Z
 170:	84 ff       	sbrs	r24, 4
 172:	fd cf       	rjmp	.-6      	; 0x16e <adcread+0x12>
	/* Clear interrupt flag */
	ADCSRA |= (1<<ADIF);
 174:	ea e7       	ldi	r30, 0x7A	; 122
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	80 61       	ori	r24, 0x10	; 16
 17c:	80 83       	st	Z, r24
	exhaustive_delay_ms(1);                      /* Wait a little bit */
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 68 00 	call	0xd0	; 0xd0 <exhaustive_delay_ms>
	/* Return ADC word */
	return ADCW;
 186:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 18a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 18e:	08 95       	ret

00000190 <readKey>:

int readKey(volatile uint8_t* GPIO_Port_Ptr, int GPIO_Pin, int commonState){
 190:	ff 92       	push	r15
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
	int pressed = 0;
	if ((commonState ^ (*GPIO_Port_Ptr>>GPIO_Pin))&1){
 19a:	fc 01       	movw	r30, r24
 19c:	20 81       	ld	r18, Z
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	06 2e       	mov	r0, r22
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <readKey+0x18>
 1a4:	35 95       	asr	r19
 1a6:	27 95       	ror	r18
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <readKey+0x14>
 1ac:	24 27       	eor	r18, r20
 1ae:	35 27       	eor	r19, r21
 1b0:	20 ff       	sbrs	r18, 0
 1b2:	1a c0       	rjmp	.+52     	; 0x1e8 <readKey+0x58>
 1b4:	8a 01       	movw	r16, r20
 1b6:	f6 2e       	mov	r15, r22
 1b8:	ec 01       	movw	r28, r24
		delay_ms(20);
 1ba:	84 e1       	ldi	r24, 0x14	; 20
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
		while ((commonState ^ (*GPIO_Port_Ptr>>GPIO_Pin))&1){}
 1c2:	28 81       	ld	r18, Y
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	0f 2c       	mov	r0, r15
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <readKey+0x3e>
 1ca:	35 95       	asr	r19
 1cc:	27 95       	ror	r18
 1ce:	0a 94       	dec	r0
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <readKey+0x3a>
 1d2:	20 27       	eor	r18, r16
 1d4:	31 27       	eor	r19, r17
 1d6:	20 fd       	sbrc	r18, 0
 1d8:	f4 cf       	rjmp	.-24     	; 0x1c2 <readKey+0x32>
		delay_ms(20);
 1da:	84 e1       	ldi	r24, 0x14	; 20
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
		pressed = 1;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <readKey+0x5c>
	/* Return ADC word */
	return ADCW;
}

int readKey(volatile uint8_t* GPIO_Port_Ptr, int GPIO_Pin, int commonState){
	int pressed = 0;
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
		while ((commonState ^ (*GPIO_Port_Ptr>>GPIO_Pin))&1){}
		delay_ms(20);
		pressed = 1;
	}
	return pressed;
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	0f 91       	pop	r16
 1f4:	ff 90       	pop	r15
 1f6:	08 95       	ret

000001f8 <main>:

int main(void)
{
	
	UCSR0C = 0x06;
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = 9-1; // 9600 baud rate
 1fe:	88 e0       	ldi	r24, 0x08	; 8
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 206:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (0<<RXEN0)|(1<<TXEN0)|(0<<RXCIE0)|(1<<UDRIE0);
 20a:	88 e2       	ldi	r24, 0x28	; 40
 20c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	TCCR1B = 0x0D;  // Timer 0: with prescaler 64, CTC, 1ms
 210:	8d e0       	ldi	r24, 0x0D	; 13
 212:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A = 1526*2;
 216:	8c ee       	ldi	r24, 0xEC	; 236
 218:	9b e0       	ldi	r25, 0x0B	; 11
 21a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 21e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = (1<<OCIE1A);
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	adcinit();
 228:	0e 94 a5 00 	call	0x14a	; 0x14a <adcinit>

	sei();
 22c:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		if (readKey(&PIND, 2, 1)){strcpy(tx_buffer, "/keyA");}
 22e:	41 e0       	ldi	r20, 0x01	; 1
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	62 e0       	ldi	r22, 0x02	; 2
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	89 e2       	ldi	r24, 0x29	; 41
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 c8 00 	call	0x190	; 0x190 <readKey>
 23e:	89 2b       	or	r24, r25
 240:	49 f0       	breq	.+18     	; 0x254 <main+0x5c>
 242:	86 e0       	ldi	r24, 0x06	; 6
 244:	e2 e2       	ldi	r30, 0x22	; 34
 246:	f1 e0       	ldi	r31, 0x01	; 1
 248:	a4 e0       	ldi	r26, 0x04	; 4
 24a:	b1 e0       	ldi	r27, 0x01	; 1
 24c:	01 90       	ld	r0, Z+
 24e:	0d 92       	st	X+, r0
 250:	8a 95       	dec	r24
 252:	e1 f7       	brne	.-8      	; 0x24c <main+0x54>
		if (readKey(&PIND, 3, 1)){strcpy(tx_buffer, "/keyB");}
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	63 e0       	ldi	r22, 0x03	; 3
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	89 e2       	ldi	r24, 0x29	; 41
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 c8 00 	call	0x190	; 0x190 <readKey>
 264:	89 2b       	or	r24, r25
 266:	49 f0       	breq	.+18     	; 0x27a <main+0x82>
 268:	86 e0       	ldi	r24, 0x06	; 6
 26a:	e8 e2       	ldi	r30, 0x28	; 40
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	a4 e0       	ldi	r26, 0x04	; 4
 270:	b1 e0       	ldi	r27, 0x01	; 1
 272:	01 90       	ld	r0, Z+
 274:	0d 92       	st	X+, r0
 276:	8a 95       	dec	r24
 278:	e1 f7       	brne	.-8      	; 0x272 <main+0x7a>
		if (readKey(&PIND, 4, 1)){strcpy(tx_buffer, "/keyC");}
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	64 e0       	ldi	r22, 0x04	; 4
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	89 e2       	ldi	r24, 0x29	; 41
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 c8 00 	call	0x190	; 0x190 <readKey>
 28a:	89 2b       	or	r24, r25
 28c:	49 f0       	breq	.+18     	; 0x2a0 <main+0xa8>
 28e:	86 e0       	ldi	r24, 0x06	; 6
 290:	ee e2       	ldi	r30, 0x2E	; 46
 292:	f1 e0       	ldi	r31, 0x01	; 1
 294:	a4 e0       	ldi	r26, 0x04	; 4
 296:	b1 e0       	ldi	r27, 0x01	; 1
 298:	01 90       	ld	r0, Z+
 29a:	0d 92       	st	X+, r0
 29c:	8a 95       	dec	r24
 29e:	e1 f7       	brne	.-8      	; 0x298 <main+0xa0>
		if (readKey(&PIND, 5, 1)){strcpy(tx_buffer, "/keyD");}
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	65 e0       	ldi	r22, 0x05	; 5
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	89 e2       	ldi	r24, 0x29	; 41
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 c8 00 	call	0x190	; 0x190 <readKey>
 2b0:	89 2b       	or	r24, r25
 2b2:	49 f0       	breq	.+18     	; 0x2c6 <main+0xce>
 2b4:	86 e0       	ldi	r24, 0x06	; 6
 2b6:	e4 e3       	ldi	r30, 0x34	; 52
 2b8:	f1 e0       	ldi	r31, 0x01	; 1
 2ba:	a4 e0       	ldi	r26, 0x04	; 4
 2bc:	b1 e0       	ldi	r27, 0x01	; 1
 2be:	01 90       	ld	r0, Z+
 2c0:	0d 92       	st	X+, r0
 2c2:	8a 95       	dec	r24
 2c4:	e1 f7       	brne	.-8      	; 0x2be <main+0xc6>
		if (readKey(&PIND, 6, 1)){strcpy(tx_buffer, "/keyE");}
 2c6:	41 e0       	ldi	r20, 0x01	; 1
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	66 e0       	ldi	r22, 0x06	; 6
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	89 e2       	ldi	r24, 0x29	; 41
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 c8 00 	call	0x190	; 0x190 <readKey>
 2d6:	89 2b       	or	r24, r25
 2d8:	49 f0       	breq	.+18     	; 0x2ec <main+0xf4>
 2da:	86 e0       	ldi	r24, 0x06	; 6
 2dc:	ea e3       	ldi	r30, 0x3A	; 58
 2de:	f1 e0       	ldi	r31, 0x01	; 1
 2e0:	a4 e0       	ldi	r26, 0x04	; 4
 2e2:	b1 e0       	ldi	r27, 0x01	; 1
 2e4:	01 90       	ld	r0, Z+
 2e6:	0d 92       	st	X+, r0
 2e8:	8a 95       	dec	r24
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0xec>
		if (readKey(&PIND, 7, 1)){strcpy(tx_buffer, "/keyF");}
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	67 e0       	ldi	r22, 0x07	; 7
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	89 e2       	ldi	r24, 0x29	; 41
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 c8 00 	call	0x190	; 0x190 <readKey>
 2fc:	89 2b       	or	r24, r25
 2fe:	49 f0       	breq	.+18     	; 0x312 <main+0x11a>
 300:	86 e0       	ldi	r24, 0x06	; 6
 302:	e0 e4       	ldi	r30, 0x40	; 64
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	a4 e0       	ldi	r26, 0x04	; 4
 308:	b1 e0       	ldi	r27, 0x01	; 1
 30a:	01 90       	ld	r0, Z+
 30c:	0d 92       	st	X+, r0
 30e:	8a 95       	dec	r24
 310:	e1 f7       	brne	.-8      	; 0x30a <main+0x112>
		if (readKey(&PINB, 0, 1)){strcpy(tx_buffer, "/keyK");}
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	83 e2       	ldi	r24, 0x23	; 35
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 c8 00 	call	0x190	; 0x190 <readKey>
 322:	89 2b       	or	r24, r25
 324:	49 f0       	breq	.+18     	; 0x338 <main+0x140>
 326:	86 e0       	ldi	r24, 0x06	; 6
 328:	e6 e4       	ldi	r30, 0x46	; 70
 32a:	f1 e0       	ldi	r31, 0x01	; 1
 32c:	a4 e0       	ldi	r26, 0x04	; 4
 32e:	b1 e0       	ldi	r27, 0x01	; 1
 330:	01 90       	ld	r0, Z+
 332:	0d 92       	st	X+, r0
 334:	8a 95       	dec	r24
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0x138>
		/*sprintf(tx_buffer, "/X%02d", (int)(adcread(0)/10.24));
		sprintf(tx_buffer, "/Y%02d", (int)(adcread(1)/10.24));*/
		delay_ms(40);
 338:	88 e2       	ldi	r24, 0x28	; 40
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 53 00 	call	0xa6	; 0xa6 <delay_ms>
    }
 340:	76 cf       	rjmp	.-276    	; 0x22e <main+0x36>

00000342 <__vector_11>:
}

int joystick_check_XY = 0;
int joystick_X = 50;
int joystick_Y = 50;
ISR(TIMER1_COMPA_vect){
 342:	1f 92       	push	r1
 344:	0f 92       	push	r0
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	0f 92       	push	r0
 34a:	11 24       	eor	r1, r1
 34c:	2f 93       	push	r18
 34e:	3f 93       	push	r19
 350:	4f 93       	push	r20
 352:	5f 93       	push	r21
 354:	6f 93       	push	r22
 356:	7f 93       	push	r23
 358:	8f 93       	push	r24
 35a:	9f 93       	push	r25
 35c:	af 93       	push	r26
 35e:	bf 93       	push	r27
 360:	ef 93       	push	r30
 362:	ff 93       	push	r31
	if(joystick_check_XY){
 364:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
 368:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
 36c:	89 2b       	or	r24, r25
 36e:	b1 f0       	breq	.+44     	; 0x39c <__vector_11+0x5a>
		joystick_X = (int)(adcread(0)/10.24);
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 ae 00 	call	0x15c	; 0x15c <adcread>
 376:	bc 01       	movw	r22, r24
 378:	99 0f       	add	r25, r25
 37a:	88 0b       	sbc	r24, r24
 37c:	99 0b       	sbc	r25, r25
 37e:	0e 94 02 03 	call	0x604	; 0x604 <__floatsisf>
 382:	2a e0       	ldi	r18, 0x0A	; 10
 384:	37 ed       	ldi	r19, 0xD7	; 215
 386:	43 e2       	ldi	r20, 0x23	; 35
 388:	51 e4       	ldi	r21, 0x41	; 65
 38a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__divsf3>
 38e:	0e 94 ca 02 	call	0x594	; 0x594 <__fixsfsi>
 392:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <joystick_X+0x1>
 396:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <joystick_X>
 39a:	64 c0       	rjmp	.+200    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		//sprintf(tx_buffer, "/X%02d", joystick_X);
	}else{
		joystick_Y = (int)(adcread(1)/10.24);
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 ae 00 	call	0x15c	; 0x15c <adcread>
 3a2:	bc 01       	movw	r22, r24
 3a4:	99 0f       	add	r25, r25
 3a6:	88 0b       	sbc	r24, r24
 3a8:	99 0b       	sbc	r25, r25
 3aa:	0e 94 02 03 	call	0x604	; 0x604 <__floatsisf>
 3ae:	2a e0       	ldi	r18, 0x0A	; 10
 3b0:	37 ed       	ldi	r19, 0xD7	; 215
 3b2:	43 e2       	ldi	r20, 0x23	; 35
 3b4:	51 e4       	ldi	r21, 0x41	; 65
 3b6:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__divsf3>
 3ba:	0e 94 ca 02 	call	0x594	; 0x594 <__fixsfsi>
 3be:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 3c2:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 3c6:	4e c0       	rjmp	.+156    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		//sprintf(tx_buffer, "/Y%02d", joystick_Y);
	}
	joystick_check_XY = 1-joystick_check_XY;
	if(joystick_X<35 && joystick_Y<80 && joystick_Y>20){ sprintf(tx_buffer, "/L");}
 3c8:	e4 e0       	ldi	r30, 0x04	; 4
 3ca:	f1 e0       	ldi	r31, 0x01	; 1
 3cc:	8f e2       	ldi	r24, 0x2F	; 47
 3ce:	9c e4       	ldi	r25, 0x4C	; 76
 3d0:	91 83       	std	Z+1, r25	; 0x01
 3d2:	80 83       	st	Z, r24
 3d4:	12 82       	std	Z+2, r1	; 0x02
 3d6:	5b c0       	rjmp	.+182    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	else if(joystick_X>65 && joystick_Y<80 && joystick_Y>20){ sprintf(tx_buffer, "/R");}
 3d8:	82 34       	cpi	r24, 0x42	; 66
 3da:	91 05       	cpc	r25, r1
 3dc:	8c f0       	brlt	.+34     	; 0x400 <__LOCK_REGION_LENGTH__>
 3de:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 3e2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 3e6:	25 51       	subi	r18, 0x15	; 21
 3e8:	31 09       	sbc	r19, r1
 3ea:	2b 33       	cpi	r18, 0x3B	; 59
 3ec:	31 05       	cpc	r19, r1
 3ee:	40 f4       	brcc	.+16     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f0:	e4 e0       	ldi	r30, 0x04	; 4
 3f2:	f1 e0       	ldi	r31, 0x01	; 1
 3f4:	8f e2       	ldi	r24, 0x2F	; 47
 3f6:	92 e5       	ldi	r25, 0x52	; 82
 3f8:	91 83       	std	Z+1, r25	; 0x01
 3fa:	80 83       	st	Z, r24
 3fc:	12 82       	std	Z+2, r1	; 0x02
 3fe:	47 c0       	rjmp	.+142    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	else if(joystick_Y>65 && joystick_X<80 && joystick_X>20){ sprintf(tx_buffer, "/F");}
 400:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 404:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 408:	22 34       	cpi	r18, 0x42	; 66
 40a:	31 05       	cpc	r19, r1
 40c:	5c f0       	brlt	.+22     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 40e:	45 97       	sbiw	r24, 0x15	; 21
 410:	cb 97       	sbiw	r24, 0x3b	; 59
 412:	b0 f4       	brcc	.+44     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 414:	e4 e0       	ldi	r30, 0x04	; 4
 416:	f1 e0       	ldi	r31, 0x01	; 1
 418:	8f e2       	ldi	r24, 0x2F	; 47
 41a:	96 e4       	ldi	r25, 0x46	; 70
 41c:	91 83       	std	Z+1, r25	; 0x01
 41e:	80 83       	st	Z, r24
 420:	12 82       	std	Z+2, r1	; 0x02
 422:	35 c0       	rjmp	.+106    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	else if(joystick_Y<35 && joystick_X<80 && joystick_X>20){ sprintf(tx_buffer, "/B");}
 424:	23 32       	cpi	r18, 0x23	; 35
 426:	31 05       	cpc	r19, r1
 428:	5c f4       	brge	.+22     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 42a:	45 97       	sbiw	r24, 0x15	; 21
 42c:	cb 97       	sbiw	r24, 0x3b	; 59
 42e:	40 f4       	brcc	.+16     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 430:	e4 e0       	ldi	r30, 0x04	; 4
 432:	f1 e0       	ldi	r31, 0x01	; 1
 434:	8f e2       	ldi	r24, 0x2F	; 47
 436:	92 e4       	ldi	r25, 0x42	; 66
 438:	91 83       	std	Z+1, r25	; 0x01
 43a:	80 83       	st	Z, r24
 43c:	12 82       	std	Z+2, r1	; 0x02
 43e:	27 c0       	rjmp	.+78     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	else{ sprintf(tx_buffer, "/S");}
 440:	e4 e0       	ldi	r30, 0x04	; 4
 442:	f1 e0       	ldi	r31, 0x01	; 1
 444:	8f e2       	ldi	r24, 0x2F	; 47
 446:	93 e5       	ldi	r25, 0x53	; 83
 448:	91 83       	std	Z+1, r25	; 0x01
 44a:	80 83       	st	Z, r24
 44c:	12 82       	std	Z+2, r1	; 0x02
}
 44e:	1f c0       	rjmp	.+62     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	}else{
		joystick_Y = (int)(adcread(1)/10.24);
		//sprintf(tx_buffer, "/Y%02d", joystick_Y);
	}
	joystick_check_XY = 1-joystick_check_XY;
	if(joystick_X<35 && joystick_Y<80 && joystick_Y>20){ sprintf(tx_buffer, "/L");}
 450:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 454:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 458:	25 51       	subi	r18, 0x15	; 21
 45a:	31 09       	sbc	r19, r1
 45c:	2b 33       	cpi	r18, 0x3B	; 59
 45e:	31 05       	cpc	r19, r1
 460:	78 f6       	brcc	.-98     	; 0x400 <__LOCK_REGION_LENGTH__>
 462:	b2 cf       	rjmp	.-156    	; 0x3c8 <__vector_11+0x86>
		//sprintf(tx_buffer, "/X%02d", joystick_X);
	}else{
		joystick_Y = (int)(adcread(1)/10.24);
		//sprintf(tx_buffer, "/Y%02d", joystick_Y);
	}
	joystick_check_XY = 1-joystick_check_XY;
 464:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <__data_end>
 468:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <__data_end+0x1>
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	82 1b       	sub	r24, r18
 472:	93 0b       	sbc	r25, r19
 474:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__data_end+0x1>
 478:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
	if(joystick_X<35 && joystick_Y<80 && joystick_Y>20){ sprintf(tx_buffer, "/L");}
 47c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <joystick_X>
 480:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <joystick_X+0x1>
 484:	83 32       	cpi	r24, 0x23	; 35
 486:	91 05       	cpc	r25, r1
 488:	0c f0       	brlt	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 48a:	a6 cf       	rjmp	.-180    	; 0x3d8 <__vector_11+0x96>
 48c:	e1 cf       	rjmp	.-62     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	else if(joystick_X>65 && joystick_Y<80 && joystick_Y>20){ sprintf(tx_buffer, "/R");}
	else if(joystick_Y>65 && joystick_X<80 && joystick_X>20){ sprintf(tx_buffer, "/F");}
	else if(joystick_Y<35 && joystick_X<80 && joystick_X>20){ sprintf(tx_buffer, "/B");}
	else{ sprintf(tx_buffer, "/S");}
}
 48e:	ff 91       	pop	r31
 490:	ef 91       	pop	r30
 492:	bf 91       	pop	r27
 494:	af 91       	pop	r26
 496:	9f 91       	pop	r25
 498:	8f 91       	pop	r24
 49a:	7f 91       	pop	r23
 49c:	6f 91       	pop	r22
 49e:	5f 91       	pop	r21
 4a0:	4f 91       	pop	r20
 4a2:	3f 91       	pop	r19
 4a4:	2f 91       	pop	r18
 4a6:	0f 90       	pop	r0
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	0f 90       	pop	r0
 4ac:	1f 90       	pop	r1
 4ae:	18 95       	reti

000004b0 <__divsf3>:
 4b0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__divsf3x>
 4b4:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__fp_round>
 4b8:	0e 94 4d 03 	call	0x69a	; 0x69a <__fp_pscB>
 4bc:	58 f0       	brcs	.+22     	; 0x4d4 <__divsf3+0x24>
 4be:	0e 94 46 03 	call	0x68c	; 0x68c <__fp_pscA>
 4c2:	40 f0       	brcs	.+16     	; 0x4d4 <__divsf3+0x24>
 4c4:	29 f4       	brne	.+10     	; 0x4d0 <__divsf3+0x20>
 4c6:	5f 3f       	cpi	r21, 0xFF	; 255
 4c8:	29 f0       	breq	.+10     	; 0x4d4 <__divsf3+0x24>
 4ca:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__fp_inf>
 4ce:	51 11       	cpse	r21, r1
 4d0:	0c 94 88 03 	jmp	0x710	; 0x710 <__fp_szero>
 4d4:	0c 94 43 03 	jmp	0x686	; 0x686 <__fp_nan>

000004d8 <__divsf3x>:
 4d8:	0e 94 65 03 	call	0x6ca	; 0x6ca <__fp_split3>
 4dc:	68 f3       	brcs	.-38     	; 0x4b8 <__divsf3+0x8>

000004de <__divsf3_pse>:
 4de:	99 23       	and	r25, r25
 4e0:	b1 f3       	breq	.-20     	; 0x4ce <__divsf3+0x1e>
 4e2:	55 23       	and	r21, r21
 4e4:	91 f3       	breq	.-28     	; 0x4ca <__divsf3+0x1a>
 4e6:	95 1b       	sub	r25, r21
 4e8:	55 0b       	sbc	r21, r21
 4ea:	bb 27       	eor	r27, r27
 4ec:	aa 27       	eor	r26, r26
 4ee:	62 17       	cp	r22, r18
 4f0:	73 07       	cpc	r23, r19
 4f2:	84 07       	cpc	r24, r20
 4f4:	38 f0       	brcs	.+14     	; 0x504 <__divsf3_pse+0x26>
 4f6:	9f 5f       	subi	r25, 0xFF	; 255
 4f8:	5f 4f       	sbci	r21, 0xFF	; 255
 4fa:	22 0f       	add	r18, r18
 4fc:	33 1f       	adc	r19, r19
 4fe:	44 1f       	adc	r20, r20
 500:	aa 1f       	adc	r26, r26
 502:	a9 f3       	breq	.-22     	; 0x4ee <__divsf3_pse+0x10>
 504:	35 d0       	rcall	.+106    	; 0x570 <__divsf3_pse+0x92>
 506:	0e 2e       	mov	r0, r30
 508:	3a f0       	brmi	.+14     	; 0x518 <__divsf3_pse+0x3a>
 50a:	e0 e8       	ldi	r30, 0x80	; 128
 50c:	32 d0       	rcall	.+100    	; 0x572 <__divsf3_pse+0x94>
 50e:	91 50       	subi	r25, 0x01	; 1
 510:	50 40       	sbci	r21, 0x00	; 0
 512:	e6 95       	lsr	r30
 514:	00 1c       	adc	r0, r0
 516:	ca f7       	brpl	.-14     	; 0x50a <__divsf3_pse+0x2c>
 518:	2b d0       	rcall	.+86     	; 0x570 <__divsf3_pse+0x92>
 51a:	fe 2f       	mov	r31, r30
 51c:	29 d0       	rcall	.+82     	; 0x570 <__divsf3_pse+0x92>
 51e:	66 0f       	add	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	88 1f       	adc	r24, r24
 524:	bb 1f       	adc	r27, r27
 526:	26 17       	cp	r18, r22
 528:	37 07       	cpc	r19, r23
 52a:	48 07       	cpc	r20, r24
 52c:	ab 07       	cpc	r26, r27
 52e:	b0 e8       	ldi	r27, 0x80	; 128
 530:	09 f0       	breq	.+2      	; 0x534 <__divsf3_pse+0x56>
 532:	bb 0b       	sbc	r27, r27
 534:	80 2d       	mov	r24, r0
 536:	bf 01       	movw	r22, r30
 538:	ff 27       	eor	r31, r31
 53a:	93 58       	subi	r25, 0x83	; 131
 53c:	5f 4f       	sbci	r21, 0xFF	; 255
 53e:	3a f0       	brmi	.+14     	; 0x54e <__divsf3_pse+0x70>
 540:	9e 3f       	cpi	r25, 0xFE	; 254
 542:	51 05       	cpc	r21, r1
 544:	78 f0       	brcs	.+30     	; 0x564 <__divsf3_pse+0x86>
 546:	0c 94 3d 03 	jmp	0x67a	; 0x67a <__fp_inf>
 54a:	0c 94 88 03 	jmp	0x710	; 0x710 <__fp_szero>
 54e:	5f 3f       	cpi	r21, 0xFF	; 255
 550:	e4 f3       	brlt	.-8      	; 0x54a <__divsf3_pse+0x6c>
 552:	98 3e       	cpi	r25, 0xE8	; 232
 554:	d4 f3       	brlt	.-12     	; 0x54a <__divsf3_pse+0x6c>
 556:	86 95       	lsr	r24
 558:	77 95       	ror	r23
 55a:	67 95       	ror	r22
 55c:	b7 95       	ror	r27
 55e:	f7 95       	ror	r31
 560:	9f 5f       	subi	r25, 0xFF	; 255
 562:	c9 f7       	brne	.-14     	; 0x556 <__divsf3_pse+0x78>
 564:	88 0f       	add	r24, r24
 566:	91 1d       	adc	r25, r1
 568:	96 95       	lsr	r25
 56a:	87 95       	ror	r24
 56c:	97 f9       	bld	r25, 7
 56e:	08 95       	ret
 570:	e1 e0       	ldi	r30, 0x01	; 1
 572:	66 0f       	add	r22, r22
 574:	77 1f       	adc	r23, r23
 576:	88 1f       	adc	r24, r24
 578:	bb 1f       	adc	r27, r27
 57a:	62 17       	cp	r22, r18
 57c:	73 07       	cpc	r23, r19
 57e:	84 07       	cpc	r24, r20
 580:	ba 07       	cpc	r27, r26
 582:	20 f0       	brcs	.+8      	; 0x58c <__divsf3_pse+0xae>
 584:	62 1b       	sub	r22, r18
 586:	73 0b       	sbc	r23, r19
 588:	84 0b       	sbc	r24, r20
 58a:	ba 0b       	sbc	r27, r26
 58c:	ee 1f       	adc	r30, r30
 58e:	88 f7       	brcc	.-30     	; 0x572 <__divsf3_pse+0x94>
 590:	e0 95       	com	r30
 592:	08 95       	ret

00000594 <__fixsfsi>:
 594:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__fixunssfsi>
 598:	68 94       	set
 59a:	b1 11       	cpse	r27, r1
 59c:	0c 94 88 03 	jmp	0x710	; 0x710 <__fp_szero>
 5a0:	08 95       	ret

000005a2 <__fixunssfsi>:
 5a2:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_splitA>
 5a6:	88 f0       	brcs	.+34     	; 0x5ca <__fixunssfsi+0x28>
 5a8:	9f 57       	subi	r25, 0x7F	; 127
 5aa:	98 f0       	brcs	.+38     	; 0x5d2 <__fixunssfsi+0x30>
 5ac:	b9 2f       	mov	r27, r25
 5ae:	99 27       	eor	r25, r25
 5b0:	b7 51       	subi	r27, 0x17	; 23
 5b2:	b0 f0       	brcs	.+44     	; 0x5e0 <__fixunssfsi+0x3e>
 5b4:	e1 f0       	breq	.+56     	; 0x5ee <__fixunssfsi+0x4c>
 5b6:	66 0f       	add	r22, r22
 5b8:	77 1f       	adc	r23, r23
 5ba:	88 1f       	adc	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	1a f0       	brmi	.+6      	; 0x5c6 <__fixunssfsi+0x24>
 5c0:	ba 95       	dec	r27
 5c2:	c9 f7       	brne	.-14     	; 0x5b6 <__fixunssfsi+0x14>
 5c4:	14 c0       	rjmp	.+40     	; 0x5ee <__fixunssfsi+0x4c>
 5c6:	b1 30       	cpi	r27, 0x01	; 1
 5c8:	91 f0       	breq	.+36     	; 0x5ee <__fixunssfsi+0x4c>
 5ca:	0e 94 87 03 	call	0x70e	; 0x70e <__fp_zero>
 5ce:	b1 e0       	ldi	r27, 0x01	; 1
 5d0:	08 95       	ret
 5d2:	0c 94 87 03 	jmp	0x70e	; 0x70e <__fp_zero>
 5d6:	67 2f       	mov	r22, r23
 5d8:	78 2f       	mov	r23, r24
 5da:	88 27       	eor	r24, r24
 5dc:	b8 5f       	subi	r27, 0xF8	; 248
 5de:	39 f0       	breq	.+14     	; 0x5ee <__fixunssfsi+0x4c>
 5e0:	b9 3f       	cpi	r27, 0xF9	; 249
 5e2:	cc f3       	brlt	.-14     	; 0x5d6 <__fixunssfsi+0x34>
 5e4:	86 95       	lsr	r24
 5e6:	77 95       	ror	r23
 5e8:	67 95       	ror	r22
 5ea:	b3 95       	inc	r27
 5ec:	d9 f7       	brne	.-10     	; 0x5e4 <__fixunssfsi+0x42>
 5ee:	3e f4       	brtc	.+14     	; 0x5fe <__fixunssfsi+0x5c>
 5f0:	90 95       	com	r25
 5f2:	80 95       	com	r24
 5f4:	70 95       	com	r23
 5f6:	61 95       	neg	r22
 5f8:	7f 4f       	sbci	r23, 0xFF	; 255
 5fa:	8f 4f       	sbci	r24, 0xFF	; 255
 5fc:	9f 4f       	sbci	r25, 0xFF	; 255
 5fe:	08 95       	ret

00000600 <__floatunsisf>:
 600:	e8 94       	clt
 602:	09 c0       	rjmp	.+18     	; 0x616 <__floatsisf+0x12>

00000604 <__floatsisf>:
 604:	97 fb       	bst	r25, 7
 606:	3e f4       	brtc	.+14     	; 0x616 <__floatsisf+0x12>
 608:	90 95       	com	r25
 60a:	80 95       	com	r24
 60c:	70 95       	com	r23
 60e:	61 95       	neg	r22
 610:	7f 4f       	sbci	r23, 0xFF	; 255
 612:	8f 4f       	sbci	r24, 0xFF	; 255
 614:	9f 4f       	sbci	r25, 0xFF	; 255
 616:	99 23       	and	r25, r25
 618:	a9 f0       	breq	.+42     	; 0x644 <__floatsisf+0x40>
 61a:	f9 2f       	mov	r31, r25
 61c:	96 e9       	ldi	r25, 0x96	; 150
 61e:	bb 27       	eor	r27, r27
 620:	93 95       	inc	r25
 622:	f6 95       	lsr	r31
 624:	87 95       	ror	r24
 626:	77 95       	ror	r23
 628:	67 95       	ror	r22
 62a:	b7 95       	ror	r27
 62c:	f1 11       	cpse	r31, r1
 62e:	f8 cf       	rjmp	.-16     	; 0x620 <__floatsisf+0x1c>
 630:	fa f4       	brpl	.+62     	; 0x670 <__floatsisf+0x6c>
 632:	bb 0f       	add	r27, r27
 634:	11 f4       	brne	.+4      	; 0x63a <__floatsisf+0x36>
 636:	60 ff       	sbrs	r22, 0
 638:	1b c0       	rjmp	.+54     	; 0x670 <__floatsisf+0x6c>
 63a:	6f 5f       	subi	r22, 0xFF	; 255
 63c:	7f 4f       	sbci	r23, 0xFF	; 255
 63e:	8f 4f       	sbci	r24, 0xFF	; 255
 640:	9f 4f       	sbci	r25, 0xFF	; 255
 642:	16 c0       	rjmp	.+44     	; 0x670 <__floatsisf+0x6c>
 644:	88 23       	and	r24, r24
 646:	11 f0       	breq	.+4      	; 0x64c <__floatsisf+0x48>
 648:	96 e9       	ldi	r25, 0x96	; 150
 64a:	11 c0       	rjmp	.+34     	; 0x66e <__floatsisf+0x6a>
 64c:	77 23       	and	r23, r23
 64e:	21 f0       	breq	.+8      	; 0x658 <__floatsisf+0x54>
 650:	9e e8       	ldi	r25, 0x8E	; 142
 652:	87 2f       	mov	r24, r23
 654:	76 2f       	mov	r23, r22
 656:	05 c0       	rjmp	.+10     	; 0x662 <__floatsisf+0x5e>
 658:	66 23       	and	r22, r22
 65a:	71 f0       	breq	.+28     	; 0x678 <__floatsisf+0x74>
 65c:	96 e8       	ldi	r25, 0x86	; 134
 65e:	86 2f       	mov	r24, r22
 660:	70 e0       	ldi	r23, 0x00	; 0
 662:	60 e0       	ldi	r22, 0x00	; 0
 664:	2a f0       	brmi	.+10     	; 0x670 <__floatsisf+0x6c>
 666:	9a 95       	dec	r25
 668:	66 0f       	add	r22, r22
 66a:	77 1f       	adc	r23, r23
 66c:	88 1f       	adc	r24, r24
 66e:	da f7       	brpl	.-10     	; 0x666 <__floatsisf+0x62>
 670:	88 0f       	add	r24, r24
 672:	96 95       	lsr	r25
 674:	87 95       	ror	r24
 676:	97 f9       	bld	r25, 7
 678:	08 95       	ret

0000067a <__fp_inf>:
 67a:	97 f9       	bld	r25, 7
 67c:	9f 67       	ori	r25, 0x7F	; 127
 67e:	80 e8       	ldi	r24, 0x80	; 128
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	60 e0       	ldi	r22, 0x00	; 0
 684:	08 95       	ret

00000686 <__fp_nan>:
 686:	9f ef       	ldi	r25, 0xFF	; 255
 688:	80 ec       	ldi	r24, 0xC0	; 192
 68a:	08 95       	ret

0000068c <__fp_pscA>:
 68c:	00 24       	eor	r0, r0
 68e:	0a 94       	dec	r0
 690:	16 16       	cp	r1, r22
 692:	17 06       	cpc	r1, r23
 694:	18 06       	cpc	r1, r24
 696:	09 06       	cpc	r0, r25
 698:	08 95       	ret

0000069a <__fp_pscB>:
 69a:	00 24       	eor	r0, r0
 69c:	0a 94       	dec	r0
 69e:	12 16       	cp	r1, r18
 6a0:	13 06       	cpc	r1, r19
 6a2:	14 06       	cpc	r1, r20
 6a4:	05 06       	cpc	r0, r21
 6a6:	08 95       	ret

000006a8 <__fp_round>:
 6a8:	09 2e       	mov	r0, r25
 6aa:	03 94       	inc	r0
 6ac:	00 0c       	add	r0, r0
 6ae:	11 f4       	brne	.+4      	; 0x6b4 <__fp_round+0xc>
 6b0:	88 23       	and	r24, r24
 6b2:	52 f0       	brmi	.+20     	; 0x6c8 <__fp_round+0x20>
 6b4:	bb 0f       	add	r27, r27
 6b6:	40 f4       	brcc	.+16     	; 0x6c8 <__fp_round+0x20>
 6b8:	bf 2b       	or	r27, r31
 6ba:	11 f4       	brne	.+4      	; 0x6c0 <__fp_round+0x18>
 6bc:	60 ff       	sbrs	r22, 0
 6be:	04 c0       	rjmp	.+8      	; 0x6c8 <__fp_round+0x20>
 6c0:	6f 5f       	subi	r22, 0xFF	; 255
 6c2:	7f 4f       	sbci	r23, 0xFF	; 255
 6c4:	8f 4f       	sbci	r24, 0xFF	; 255
 6c6:	9f 4f       	sbci	r25, 0xFF	; 255
 6c8:	08 95       	ret

000006ca <__fp_split3>:
 6ca:	57 fd       	sbrc	r21, 7
 6cc:	90 58       	subi	r25, 0x80	; 128
 6ce:	44 0f       	add	r20, r20
 6d0:	55 1f       	adc	r21, r21
 6d2:	59 f0       	breq	.+22     	; 0x6ea <__fp_splitA+0x10>
 6d4:	5f 3f       	cpi	r21, 0xFF	; 255
 6d6:	71 f0       	breq	.+28     	; 0x6f4 <__fp_splitA+0x1a>
 6d8:	47 95       	ror	r20

000006da <__fp_splitA>:
 6da:	88 0f       	add	r24, r24
 6dc:	97 fb       	bst	r25, 7
 6de:	99 1f       	adc	r25, r25
 6e0:	61 f0       	breq	.+24     	; 0x6fa <__fp_splitA+0x20>
 6e2:	9f 3f       	cpi	r25, 0xFF	; 255
 6e4:	79 f0       	breq	.+30     	; 0x704 <__fp_splitA+0x2a>
 6e6:	87 95       	ror	r24
 6e8:	08 95       	ret
 6ea:	12 16       	cp	r1, r18
 6ec:	13 06       	cpc	r1, r19
 6ee:	14 06       	cpc	r1, r20
 6f0:	55 1f       	adc	r21, r21
 6f2:	f2 cf       	rjmp	.-28     	; 0x6d8 <__fp_split3+0xe>
 6f4:	46 95       	lsr	r20
 6f6:	f1 df       	rcall	.-30     	; 0x6da <__fp_splitA>
 6f8:	08 c0       	rjmp	.+16     	; 0x70a <__fp_splitA+0x30>
 6fa:	16 16       	cp	r1, r22
 6fc:	17 06       	cpc	r1, r23
 6fe:	18 06       	cpc	r1, r24
 700:	99 1f       	adc	r25, r25
 702:	f1 cf       	rjmp	.-30     	; 0x6e6 <__fp_splitA+0xc>
 704:	86 95       	lsr	r24
 706:	71 05       	cpc	r23, r1
 708:	61 05       	cpc	r22, r1
 70a:	08 94       	sec
 70c:	08 95       	ret

0000070e <__fp_zero>:
 70e:	e8 94       	clt

00000710 <__fp_szero>:
 710:	bb 27       	eor	r27, r27
 712:	66 27       	eor	r22, r22
 714:	77 27       	eor	r23, r23
 716:	cb 01       	movw	r24, r22
 718:	97 f9       	bld	r25, 7
 71a:	08 95       	ret

0000071c <_exit>:
 71c:	f8 94       	cli

0000071e <__stop_program>:
 71e:	ff cf       	rjmp	.-2      	; 0x71e <__stop_program>
